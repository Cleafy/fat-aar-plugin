package me.vigi.fataar;

import com.google.common.base.Charsets;
import com.google.common.base.Strings;
import com.google.common.collect.Lists;
import com.google.common.collect.Maps;
import com.google.common.io.Files;
import com.squareup.javapoet.FieldSpec;
import com.squareup.javapoet.JavaFile;
import com.squareup.javapoet.TypeName;
import com.squareup.javapoet.TypeSpec;
import org.w3c.dom.Document;
import org.w3c.dom.Element;

import javax.lang.model.element.Modifier;
import javax.xml.parsers.DocumentBuilderFactory;
import java.io.File;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * Created by Vigi on 2017/2/28.
 */
public class RSourceGenerator {

    public static void generate(File outputDir, AndroidArchiveLibrary androidLibrary) throws IOException {
        // check
        File symbolFile = androidLibrary.getSymbolFile();
        File manifestFile = androidLibrary.getManifest();
        if (!symbolFile.exists()) {
            return;
        }
        if (!manifestFile.exists()) {
            throw new RuntimeException("Can not find " + manifestFile);
        }
        // read R.txt
        List<String> lines = Files.readLines(symbolFile, Charsets.UTF_8);
        Map<String, List<TextSymbolItem>> symbolItemsMap = Maps.newHashMap();
        for (String line : lines) {
            String[] strings = line.split(" ", 4);
            TextSymbolItem symbolItem = new TextSymbolItem();
            symbolItem.type = strings[0];
            symbolItem.clazz = strings[1];
            symbolItem.name = strings[2];
            symbolItem.value = strings[3];
            List<TextSymbolItem> symbolItems = symbolItemsMap.get(symbolItem.clazz);
            if (symbolItems == null) {
                symbolItems = Lists.newArrayList();
                symbolItemsMap.put(symbolItem.clazz, symbolItems);
            }
            symbolItems.add(symbolItem);
        }
        if (symbolItemsMap.isEmpty()) {
            // empty R.txt
            return;
        }
        // parse package name
        String packageName = null;
        try {
            DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
            Document doc = dbf.newDocumentBuilder().parse(manifestFile);
            Element element = doc.getDocumentElement();
            packageName = element.getAttribute("package");
        } catch (Exception ignored) {}
        if (Strings.isNullOrEmpty(packageName)) {
            throw new RuntimeException("Parse package from " + manifestFile + " error!");
        }

        // write R.java
        TypeSpec.Builder classBuilder = TypeSpec.classBuilder("R")
                .addModifiers(Modifier.PUBLIC, Modifier.FINAL)
                .addJavadoc("AUTO-GENERATED FILE.  DO NOT MODIFY.\n")
                .addJavadoc("\n")
                .addJavadoc("This class was automatically generated by the\n"
                        + "fat-aar-plugin (https://github.com/Vigi0303/fat-aar-plugin)\n"
                        + "from the R.txt of the dependency it found.\n"
                        + "It should not be modified by hand.");
        for (String clazz : symbolItemsMap.keySet()) {
            TypeSpec.Builder icb = TypeSpec.classBuilder(clazz)
                    .addModifiers(Modifier.PUBLIC, Modifier.STATIC, Modifier.FINAL);
            List<TextSymbolItem> tsis = symbolItemsMap.get(clazz);
            for (TextSymbolItem item : tsis) {
                TypeName typeName = null;
                if ("int".equals(item.type)) {
                    typeName = TypeName.INT;
                }
                if ("int[]".equals(item.type)) {
                    typeName = TypeName.get(int[].class);
                }
                if (typeName == null) {
                    throw new RuntimeException("Unknown class type in " + symbolFile);
                }
                FieldSpec fieldSpec = FieldSpec.builder(typeName, item.name)
                        .addModifiers(Modifier.PUBLIC, Modifier.STATIC, Modifier.FINAL)  // Is the "final" necessary?
                        .initializer(item.value)
                        .build();
                icb.addField(fieldSpec);
            }
            classBuilder.addType(icb.build());
        }
        JavaFile javaFile = JavaFile.builder(packageName, classBuilder.build()).build();
        javaFile.writeTo(outputDir);
    }

    private static class TextSymbolItem {
        String type, clazz, name, value;
    }
}
